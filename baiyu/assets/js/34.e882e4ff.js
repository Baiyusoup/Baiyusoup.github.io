(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{628:function(t,s,e){"use strict";e.r(s);var a=e(5),i=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h2",{attrs:{id:"概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),e("p",[t._v("Git全名叫分布式版本控制系统")]),t._v(" "),e("p",[t._v("它是分布式的原因在于它有个一个本地库的概念，这个本地库是建立在本地计算机上的，无论该计算机联不联网都能使用该本地库。提交的时候就将保存在本地库的代码提交到项目的仓库中。每个人电脑上的本地库都是一个完整的版本库，提交到版本库的时候，只是提交到自己的电脑上，毫不影响到其他人。")]),t._v(" "),e("p",[t._v("重要概念")]),t._v(" "),e("ol",[e("li",[t._v("工作区")]),t._v(" "),e("li",[t._v("暂存区")]),t._v(" "),e("li",[t._v("版本库")]),t._v(" "),e("li",[t._v("Git对象")])]),t._v(" "),e("h2",{attrs:{id:"git目录"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git目录"}},[t._v("#")]),t._v(" .git目录")]),t._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("|-- hooks文件夹             # 系统默认的钩子脚本目录\n|-- logs文件夹              # 各refs的历史信息\n|-- objects文件夹           # 本地库的所有对象（commits、trees、blobs、tags）\n|-- refs文件夹              # 标识每个分支指向了哪个提交（commit）\n|-- config                  # 项目的配置信息，git config命令修改\n|-- description             # 项目的描述信息\n|-- HEAD                    # 记录当前出于哪个分支(内容: ref: refs/heads/master)，可以理解为头指针\n|-- index                   # 索引文件（存放暂存区的相关信息，暂存的文件名、文件内容的哈希串等等）\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[e("strong",[t._v("objects目录")])]),t._v(" "),e("p",[t._v("真正的仓库，所有文件、代码、库文件和图片等都会变成git对象存在这个目录下")]),t._v(" "),e("p",[e("strong",[t._v("refs目录")]),t._v("\n保存一下纯文本文件，记录着本地分支和远程分支的SHA哈希值\nrefs\n├── heads\n│ ├── develop   # 记录本地develop分支的SHA哈希值\n│ └── master    # 记录本地master分支的SHA哈希值\n├── remotes\n│ └── origin\n│ ├── develop   # 记录远程版本库develop分支的SHA哈希值\n│ └── master    # 记录远程版本库master分支的SHA哈希值\n└── tags\n└── v1.0        # 记录标签V1.0的SHA哈希值")]),t._v(" "),e("p",[t._v("git就是通过HEAD文件里refs/heads/master和refs目录下的heads目录来判断当前分支以及分支的最新提交")]),t._v(" "),e("p",[e("strong",[t._v("logs目录")]),t._v("\n保存HEAD和refs文件内容的历史变化，"),e("code",[t._v("git reflog")]),t._v("命令就是显示这里的文件内容")]),t._v(" "),e("h2",{attrs:{id:"git对象"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git对象"}},[t._v("#")]),t._v(" Git对象")]),t._v(" "),e("p",[t._v("Git对象有四种类型：blob、tree、commit和tag")]),t._v(" "),e("p",[t._v("blob 用来存储文件数据，通常是一个文件")]),t._v(" "),e("p",[t._v("tree 和目录相似")]),t._v(" "),e("p",[t._v("commit 一个commit指向一个tree，用来标记项目某个特定时间点的状态")]),t._v(" "),e("p",[t._v("tag 用来标记一个commit")]),t._v(" "),e("p",[t._v("每一个项目都会有一个40个字符的对象名。git通过比较对象名，就可以很快地判断两个对象是否相同，如果相同的内容存在两个仓库中，就会存在相同的“对象名”，节省空间，因为每个仓库的对象名的计算方法都是一样的。这个理念同样用在git对象中，如果两个文件在同一个目录中有相同的数据内容，那么就会共享同一个git对象")]),t._v(" "),e("h2",{attrs:{id:"文件所在区域"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#文件所在区域"}},[t._v("#")]),t._v(" 文件所在区域")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[t._v("工作区")])]),e("p",[t._v("我们平时开发所在的区域就是工作区，这里放着一些尚未add的文件。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[t._v("暂存区")])]),e("p",[t._v("可以理解为缓存区，是保存git add之后的文件内容。保存在"),e("code",[t._v(".git/index")]),t._v("文件里。")]),t._v(" "),e("p",[t._v("使用"),e("code",[t._v("git status")]),t._v("命令时，会根据"),e("code",[t._v(".git/index")]),t._v("文件里保存的时间戳、文件长度等信息，然后根据这些信息于工作区的文件进行比对，如果有变化，才去比对内容。这个就是git高效的因素之一。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"title"}),e("p",[t._v("版本库")])]),e("p",[t._v("保存commit之后文件内容")]),t._v(" "),e("h2",{attrs:{id:"git命令"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git命令"}},[t._v("#")]),t._v(" git命令")]),t._v(" "),e("p",[e("RouterLink",{attrs:{to:"/blogs/前端工程化/Git/git命令.html"}},[t._v("跳转")])],1)])}),[],!1,null,null,null);s.default=i.exports}}]);